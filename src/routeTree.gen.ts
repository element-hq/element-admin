/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CallbackImport } from './routes/callback'
import { Route as ConsoleImport } from './routes/_console'
import { Route as AuthImport } from './routes/_auth'
import { Route as ConsoleIndexImport } from './routes/_console.index'
import { Route as ConsoleUsersIndexImport } from './routes/_console.users.index'
import { Route as AuthLoginIndexImport } from './routes/_auth.login.index'
import { Route as ConsoleUsersUserIdImport } from './routes/_console.users.$userId'
import { Route as AuthLoginServerNameImport } from './routes/_auth.login.$serverName'

// Create/Update Routes

const CallbackRoute = CallbackImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRoute,
} as any)

const ConsoleRoute = ConsoleImport.update({
  id: '/_console',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const ConsoleIndexRoute = ConsoleIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ConsoleRoute,
} as any)

const ConsoleUsersIndexRoute = ConsoleUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => ConsoleRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => AuthRoute,
} as any)

const ConsoleUsersUserIdRoute = ConsoleUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => ConsoleRoute,
} as any)

const AuthLoginServerNameRoute = AuthLoginServerNameImport.update({
  id: '/login/$serverName',
  path: '/login/$serverName',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_console': {
      id: '/_console'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ConsoleImport
      parentRoute: typeof rootRoute
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackImport
      parentRoute: typeof rootRoute
    }
    '/_console/': {
      id: '/_console/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ConsoleIndexImport
      parentRoute: typeof ConsoleImport
    }
    '/_auth/login/$serverName': {
      id: '/_auth/login/$serverName'
      path: '/login/$serverName'
      fullPath: '/login/$serverName'
      preLoaderRoute: typeof AuthLoginServerNameImport
      parentRoute: typeof AuthImport
    }
    '/_console/users/$userId': {
      id: '/_console/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof ConsoleUsersUserIdImport
      parentRoute: typeof ConsoleImport
    }
    '/_auth/login/': {
      id: '/_auth/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof AuthImport
    }
    '/_console/users/': {
      id: '/_console/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof ConsoleUsersIndexImport
      parentRoute: typeof ConsoleImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginServerNameRoute: typeof AuthLoginServerNameRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginServerNameRoute: AuthLoginServerNameRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ConsoleRouteChildren {
  ConsoleIndexRoute: typeof ConsoleIndexRoute
  ConsoleUsersUserIdRoute: typeof ConsoleUsersUserIdRoute
  ConsoleUsersIndexRoute: typeof ConsoleUsersIndexRoute
}

const ConsoleRouteChildren: ConsoleRouteChildren = {
  ConsoleIndexRoute: ConsoleIndexRoute,
  ConsoleUsersUserIdRoute: ConsoleUsersUserIdRoute,
  ConsoleUsersIndexRoute: ConsoleUsersIndexRoute,
}

const ConsoleRouteWithChildren =
  ConsoleRoute._addFileChildren(ConsoleRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ConsoleRouteWithChildren
  '/callback': typeof CallbackRoute
  '/': typeof ConsoleIndexRoute
  '/login/$serverName': typeof AuthLoginServerNameRoute
  '/users/$userId': typeof ConsoleUsersUserIdRoute
  '/login': typeof AuthLoginIndexRoute
  '/users': typeof ConsoleUsersIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/callback': typeof CallbackRoute
  '/': typeof ConsoleIndexRoute
  '/login/$serverName': typeof AuthLoginServerNameRoute
  '/users/$userId': typeof ConsoleUsersUserIdRoute
  '/login': typeof AuthLoginIndexRoute
  '/users': typeof ConsoleUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_console': typeof ConsoleRouteWithChildren
  '/callback': typeof CallbackRoute
  '/_console/': typeof ConsoleIndexRoute
  '/_auth/login/$serverName': typeof AuthLoginServerNameRoute
  '/_console/users/$userId': typeof ConsoleUsersUserIdRoute
  '/_auth/login/': typeof AuthLoginIndexRoute
  '/_console/users/': typeof ConsoleUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/callback'
    | '/'
    | '/login/$serverName'
    | '/users/$userId'
    | '/login'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/callback'
    | '/'
    | '/login/$serverName'
    | '/users/$userId'
    | '/login'
    | '/users'
  id:
    | '__root__'
    | '/_auth'
    | '/_console'
    | '/callback'
    | '/_console/'
    | '/_auth/login/$serverName'
    | '/_console/users/$userId'
    | '/_auth/login/'
    | '/_console/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  ConsoleRoute: typeof ConsoleRouteWithChildren
  CallbackRoute: typeof CallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  ConsoleRoute: ConsoleRouteWithChildren,
  CallbackRoute: CallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_console",
        "/callback"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login/$serverName",
        "/_auth/login/"
      ]
    },
    "/_console": {
      "filePath": "_console.tsx",
      "children": [
        "/_console/",
        "/_console/users/$userId",
        "/_console/users/"
      ]
    },
    "/callback": {
      "filePath": "callback.tsx"
    },
    "/_console/": {
      "filePath": "_console.index.tsx",
      "parent": "/_console"
    },
    "/_auth/login/$serverName": {
      "filePath": "_auth.login.$serverName.tsx",
      "parent": "/_auth"
    },
    "/_console/users/$userId": {
      "filePath": "_console.users.$userId.tsx",
      "parent": "/_console"
    },
    "/_auth/login/": {
      "filePath": "_auth.login.index.tsx",
      "parent": "/_auth"
    },
    "/_console/users/": {
      "filePath": "_console.users.index.tsx",
      "parent": "/_console"
    }
  }
}
ROUTE_MANIFEST_END */
